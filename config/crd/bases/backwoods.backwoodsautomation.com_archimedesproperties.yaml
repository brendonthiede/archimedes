
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.7.0
  creationTimestamp: null
  name: archimedesproperties.backwoods.backwoodsautomation.com
spec:
  group: backwoods.backwoodsautomation.com
  names:
    kind: ArchimedesProperty
    listKind: ArchimedesPropertyList
    plural: archimedesproperties
    singular: archimedesproperty
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - description: Indicates if the ConfigMap was created/updated successfully
      jsonPath: .status.conditions[?(@.type=="ConfigmapCreated")].status
      name: Succeeded
      type: string
    - description: Reason for the current status
      jsonPath: .status.conditions[?(@.type=="ConfigmapCreated")].reason
      name: Reason
      type: string
    - description: Message with more information, regarding the current status
      jsonPath: .status.conditions[?(@.type=="ConfigmapCreated")].message
      name: Message
      type: string
    - description: Time when the condition was updated the last time
      jsonPath: .status.conditions[?(@.type=="ConfigmapCreated")].lastTransitionTime
      name: Last Transition
      type: date
    - description: Time when this ConfigMap was created
      jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1
    schema:
      openAPIV3Schema:
        description: ArchimedesProperty is the Schema for the archimedesproperties
          API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ArchimedesPropertySpec defines the desired state of ArchimedesProperty
            properties:
              KeyName:
                description: KeyName is the name of the key used if the PropertyType
                  is file
                type: string
              name:
                description: ConfigMapName is the name of the config map to be created
                type: string
              propertiesPath:
                description: 'PropertiesPath is the path to the applications properties
                  template example: config/properties.tpl'
                type: string
              propertyType:
                description: PropertyType the format you wish to store the merged
                  results as (keys or file)
                type: string
              repo:
                description: Repo is the application repo url
                type: string
              revision:
                description: Revision is the branch, commit hash or tag of the repo
                type: string
              sourceConfig:
                description: SourceConfig is yaml containing data to be merged with
                  the properties template
                type: string
            type: object
          status:
            description: ArchimedesPropertyStatus defines the observed state of ArchimedesProperty
            properties:
              conditions:
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource. --- This struct is intended for direct
                    use as an array at the field path .status.conditions.  For example,
                    type FooStatus struct{     // Represents the observations of a
                    foo's current state.     // Known .status.conditions.type are:
                    \"Available\", \"Progressing\", and \"Degraded\"     // +patchMergeKey=type
                    \    // +patchStrategy=merge     // +listType=map     // +listMapKey=type
                    \    Conditions []metav1.Condition `json:\"conditions,omitempty\"
                    patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`
                    \n     // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition
                        transitioned from one status to another. This should be when
                        the underlying condition changed.  If that is not known, then
                        using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating
                        details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.conditions[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating
                        the reason for the condition's last transition. Producers
                        of specific condition types may define expected values and
                        meanings for this field, and whether the values are considered
                        a guaranteed API. The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                        --- Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
